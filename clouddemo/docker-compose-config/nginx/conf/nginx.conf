# === 全局块 ===
# 用户组
user root root; 

# 工作进程数
worker_processes 1;

# 日志路径和日志级别
error_log  logs/error.log;
error_log  logs/error.log  notice;
error_log  logs/error.log  info;

# 进程文件路径
pid logs/nginx.pid;

# === events块 ===
events {
    # 最大连接数
    worker_connections  1024;
	
    # 设置网络连接序列化
    accept_mutex on;
	
    # 一个进程是否同时接收多个网络连接
    multi_accept on;
	
    # 事件驱动模型
    use epoll;
}

# === http块 ===
http {
		# === http全局块 ===
    # 文件扩展名与文件类型映射表
    include  mime.types;
	
    # 默认文件类型
    default_type  application/octet-stream;
	
    # 是否开启服务日志
    access_log off;
	
    # 自定义服务日志格式
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # 设置日志的格式
    access_log  logs/access.log  main;

    # 是否开启高效文件传输模式
    sendfile  on;
    # 每个进程每次最大传输值
    sendfile_max_chunk  100k;
    
    # 长连接超时事件
    keepalive_timeout  65;

    # 响应客户端的超时事件
    send_timeout 75;

    # 客户端请求头的区缓冲区大小
    client_header_buffer_size 32k;
	
    # 客户端请求头的最大缓冲区数量和大小
    large_client_header_buffers 8 32k;
	
    # 允许客户端请求的最大字节数
    client_max_body_size  10m;
	
    # 客户端请求体的缓冲区大小
    client_body_buffer_size  128k;
    
    # ---配置http_gzip模块---
    # 开启gzip压缩输出，可减少网络传输
    gzip  on;

    # 设置允许压缩的页面最小字节数
    gzip_min_length 1k;
	
    # 设置系统获取多少个单位的缓存用于存储gzip的压缩结果数据流
    gzip_buffers 4 16k;
	
    # 设置http协议的版本
    gzip_http_version 1.0;
	
    # 设置zip压缩比
    gzip_comp_level 6;
	
    # 匹配mime类型进行压缩
    gzip_types text/plain text/css application/json;
	
    # 设置开启或者关闭后端服务器返回的结果是否压缩
    gzip_proxied any;
	
    # 该配置和http头有关系，会在响应头加个vary:Accept-Encoding
    #gzip_vray on;
	
    # ---配置http_proxy反向代理---
    # Nginx跟代理服务器连接超时时间
    proxy_connect_timeout 75;
	
    # Nginx与代理服务器两个成功的响应操作之间超时时间
    proxy_read_timeout 75;
	
    # Nginx传输文件至代理服务器的超时时间
    proxy_send_timeout 100;
	
    # 设置从代理服务器读取并保存用户头信息的缓冲区大小
    proxy_buffer_size 4k;
	
    # 设置代理缓冲区大小
    proxy_buffers 4 32k;
	
    # 设置高负荷下的缓冲大小
    proxy_busy_buffers_size 64k;
	
    # 设置最大临时文件大小，默认1024M
    proxy_max_temp_file_size 64k;
	
    # 限制每次写临时文件的大小
    proxy_temp_file_write_size 64k;
	
    # 指定临时文件所在的目录
    proxy_temp_path proxy_temp;
    #include dd/*.conf

    # 定义tomcat地址
    upstream tomcat {
       server 192.168.138.100:8888;
    }

    upstream nacos {
        server 192.168.137.138:8828 weight=1 max_fails=2 fail_timeout=10s;
        server 192.168.137.138:8838 weight=1 max_fails=2 fail_timeout=10s;
        server 192.168.137.138:8818 weight=1 max_fails=2 fail_timeout=10s;
    }
		
    # === HTTP-server块 ===
    server{
        listen  8848;
        server_name 192.168.137.138;
        location / {
            proxy_pass http://nacos;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header REMOTE-HOST $remote_addr;
            add_header X-Cache $upstream_cache_status;
            add_header Cache-Control no-cache;
        }
    }

    server {
        # 监听端口
        listen 80;
		
	# 监听服务器地址
        server_name localhost;

	# 每个连接请求上限次数
	keepalive_requests 120;
		
	# 字符集
        charset utf-8;

	# 服务日志所在目录以及日志格式
        access_log  logs/host.access.log  main;

	# 错误页
	error_page 404 /404.html;
	error_page 500 502 503 504 /50x.html;
				
	# === HTTP-server-location块 ===
        location / {
	        # 服务器的默认网站根目录位置
		root /usr/share/nginx/html;
			
		# 默认访问的文件名
		index index.html;
			
		# 拒绝的IP
		#deny 192.168.56.21;
		#deny all;
			
		# 允许的IP
		#allow 192.168.56.10;
		allow all;	
	#}
		
	# 设置响应头
	#location / {
		# 设置允许跨域类型
		add_header Access-Control-Allow-Origin * always;
						
		# 是否允许信任证书
		add_header Access-Control-Allow-Credentials 'true' always;
						
		# 允许的请求头类型
		add_header Access-Control-Allow-Headers * always;
						
		# 设置允许的请求方式
		add_header Access-Control-Allow-Methods 'PUT,GET,POST,DELETE,OPTIONS' always;
						
		# 处理OPTIONS请求
		if ($request_method = 'OPTIONS') {
			return 204;
		}
        #}	
		
	# 设置反向代理服务器
	#location / {
		# 反向代理服务器地址
		proxy_pass http://192.168.137.138;
						
		# 是否重定向代理服务器地址
		proxy_redirect off;

		# 设置向代理服务器发送请求时的请求头数据
		# cookie
		proxy_pass_header Set-Cookie;
						
		# 主机名
		proxy_set_header Host $host;
						
		# 真实IP
		proxy_set_header X-Real-Ip $remote_addr;
						
		# 表示Http请求端真实IP
		proxy_set_header X-Forwarded-For $remote_addr;
	}
    }
    # 配置ssl
    #server {
#	# 开启 ssl
#	ssl on;
					
	# ssl证书路径
#	ssl_certificate cert.pem;
					
	# ssl证书密钥
#	ssl_certificate_key cert.key;
					
	# ssl缓存
#	ssl_session_cache shared:SSL:1m;
			    
	# ssl会话超时时间
#	ssl_session_timeout 5m;
					
	# ssl会话票据
#	ssl_session_tickets off;
					
	# ssl协议版本
#	ssl_protocols TLSv1.2;
					
	# ssl密码套件
#	ssl_ciphers 'HIGH:!aNULL:!MD5';
					
	# 开启ssl服务密码套件
#	ssl_prefer_server_ciphers on;
#    }
}
stream {
    include *.stream;
}
